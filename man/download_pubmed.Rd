% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/download_pubmed.R
\name{download_pubmed}
\alias{download_pubmed}
\title{Download PubMed record}
\usage{
download_pubmed(
  pmid,
  dir = here::here(),
  overwrite = FALSE,
  api_key = NULL,
  sleep = NULL
)
}
\arguments{
\item{pmid}{character, publication identifier. PMID or PMCID.}

\item{dir}{character, director in which to save XMLs. Defaults to working directory with `here::here()`.}

\item{overwrite}{logical, if file exists, should it be overwritten? Defaults to `FALSE`.}

\item{api_key}{character. See `rentrez` documentation on [Rate-limiting and API Keys](https://cran.r-project.org/web/packages/rentrez/vignettes/rentrez_tutorial.html#rate-limiting-and-api-keys) for info on \code{api_key}. Defaults to NULL.}

\item{sleep}{delay in seconds. Defaults to NULL. If \code{api_key} provided, \code{sleep} set to 1/10 seconds, else to 1/3 seconds per [Entrez API limits](https://ncbiinsights.ncbi.nlm.nih.gov/2017/11/02/new-api-keys-for-the-e-utilities/).}
}
\value{
If \code{pmid} successfully downloaded, returns XML. If \code{pmid} did not resolve, or already downloaded in \code{dir} (and \code{overwrite} is FALSE), returns NULL.
}
\description{
This is a wrapper around `rentrez::entrez_fetch()` that allows to `purrr::safely()` fetch and save a PubMed record.
}
\details{
This function is *not* vectorized so wrap in `purrr::walk()` to run on multiple pmids.
}
\examples{
\dontrun{
download_pubmed(99999999,
dir = here("data", "raw", "pubmed"),
api_key = keyring::key_get("ncbi-pubmed")
)
}
\dontrun{
c(99999999, 12345678) \%>\%
  purrr::walk(download_pubmed,
       dir = here("data", "raw", "pubmed"),
       api_key = keyring::key_get("ncbi-pubmed")
  )
}
}
